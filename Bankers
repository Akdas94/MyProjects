// #include<stdio.h>

// void Menu()
// {
//     printf("\n\n\t Bankers Algo !! \n");
//     printf("\n\n\t1 Accept\n ");
//     printf("\n\n\t2 display \n");
//     printf("\n\n\t3 safety algo \n");
//     printf("\n\n\t4 Quit \n");
// }

// void Accept(int a[][40], int p,int r)
// {
//     int i,j;
//     for(i=0;i<p;i++)
//     {
//         for(j=0;j<r;j++)
//         {
//             printf("\nEnter Resource R%d for Process P%d:\t",j,i);
//             scanf("%d",&a[i][j]);
//         }
//     }

// }

// void display(int a[][40], int p,int r)
// {
//     int i,j;
//     printf("\n\t");
//     for(i=0;i<r;i++)
//     {
//         printf("\tR%d",i);
//     }
//     for(i=0; i<p; i++)
//     {
//         printf("\n\n\tP%d",i);
//         for(j=0;j<r;j++)
//         {
//             printf("\t%d",a[i][j]);
//         }
//     }
// }

// void Accept_total(int total[], int r)
// {
//     int i;
//     for(i=0;i<r;i++)
//     {
//         printf("\nEnter Resource R%d: ",i);
//         scanf("%d",&total[i]);
//     }
// }

// void disp_total(int total[], int r)
// {
//     int i;
//     printf("\n\t");
//     for(i=0;i<r;i++)
//     {
//         printf("\tR%d",i);
//     }
//     printf("\n\n\t");
//     for(i=0;i<r;i++)
//     {
//         printf("\tR%d",total[i]);
//     }
// }

// void cal_need(int all[][40], int need[][40], int max[][40], int p, int r)
// {
//     int i,j;
//     for(i=0;i<p;i++)
//     {
//         for(j=0;j<r;j++)
//         {
//             need[i][j]=max[i][j]-all[i][j];
//         }
//     }
// }

// void cal_avil(int all[][40], int total[], int avil[], int p, int r)
// {
//     int i,j,sum;
//     for(i=0;i<r;i++)
//     {
//         sum = 0;
//         for(j=0;j<p;j++)
//         {
//             sum = sum + all[j][i];
//         }
//         avil[i]=total[i]-sum;
//     }
// }

// int safe_seq(int all[][40], int need[][40], int avil[], int p, int r)
// {
//     int seq[15], work[40], i,j,flag=0,k=0;
//     int finish[20]={0};
//     for(i=0;i<r;i++)
//     {
//         work[i] = avil[i];
//     }

//     while(flag==0)
//     {
//         flag = 1;
//         for(i=0;i<p;i++)
//         {
//             if(finish[i]==0)
//             {
//                 for(j=0;j<r;j++)
//                 {
//                     if(need[i][j] > work[j])
//                     {
//                         break;
//                     }
//                 }
//                 if(j==r)
//                 {
//                     finish[i]=1;
//                     for(j=0;j<r;j++)
//                     {
//                         work[j] = work[j] + all[i][j];
//                     }
//                     seq[k++] = i;
//                     flag = 0;
//                 }
//             }
//         }
//     }

//     if(k == p)
//     {
//         printf("\n the system is in safe seq and safe seq is ::\n");
//         for(i=0;i<k;i++)
//         {
//             printf("\tP%d",seq[i]);
//         }
//         return 1;
//     }

//     return 0;
// }

// int main()
// {
//     int all[40][40], need[40][40], max[40][40],p,r;
//     int avil[40], total[40];
//     int ch,x;

//     while(ch!=4)
//     {
//         Menu();
//         printf("Enter Your Choice:\t ");
//         scanf("%d",&ch);

//         switch(ch)
//         {
//             case 1:
//             printf("\n Enter No. of Process:\t");
//             scanf("%d",&p);
//             printf("\n Enter No. of Resource:\t");
//             scanf("%d",&r);
//             printf("\n Enter Allocation Matrix:\n\t");
//             Accept(all,p,r);
//             printf("\n Enter Maximum Matrix:\t");
//             Accept(max,p,r);
//             printf("\n Enter total No. of Resource:\n\t");
//             Accept_total(total,r);
//             cal_need(all,need,max,p,r);
//             cal_avil(all,total,avil,p,r);
//             break;

//             case 2:
//             printf("\nAllocation Matrix Are: \n");
//             display(all,p,r);
//             printf("\nMaximun Matrix Are: \n");
//             display(max,p,r);
//             printf("\nNeed Matrix are:\n");
//             display(need,p,r);
//             printf("\nTotal Resource are: \n");
//             disp_total(total,r);
//             printf("\nTotal avilable Resource are: \n");
//             disp_total(avil,r);
//             break;

//             case 3:
//             x = safe_seq(all,need,avil,p,r);
//             if(x == 0)
//             {
//                 printf("\nSystem is not in safe seq\n");
//             }
//             else{
//                 printf("\n");
//             }
//         }
//     }

//     return 0;
// }

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>

int main()
{
    pid_t pid;
    char a[30];
    int len, count =0, i, string;
    printf("Enter string: ");
    scanf("%d[^\n]s",a);
    len=strlen(a);
    pid=fork();
    if(pid>0)
    {
        for(i=0;i<len;i++)
        {
            if(a[i]=='a'|| a[i]=='i'||a[i]=='o' || a[i]=='u' || a[i]=='m' || a[i]=='A' || a[i]=='I' || a[i]=='O' || a=='U' || a[i]=='M')
            {
                for(i=0;i<)
            }
        }
    }
}

#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<stdlib.h>

int main()
{
    pid_t pid;
    char a[30];
    int len, count=0, i, string;
    printf("Enter the string:");
    scanf("%[^\n]s",a);
    len=strlen(a);
    pid=fork();
    if(pid>0)
    {
        for(i=0;i<len;i++)
        {
            if(a[i]=='a'|| a[i]=='e'|| a[i]=='i'|| a[i]=='o'|| a[i]=='u'|| a[i]=='A'|| a[i]=='E'|| a[i]=='I'|| a[i]=='O'|| a[i]=='U')
            {
                count++;
            }
        }
        
        printf("\n No of vowels: %d ",count);
        printf("\n\n");
        execlp("/bin/date","/user/date",NULL);
    }
    else
    {
        for(i=0;i<len;i++)
        {
            if(a[i]==32 & a[i-1]!=32)
            {
            count++;
            }
        }
        printf("\n No of Word:%d",count+1);
    }
    return 0;
}

